function LList() {
 this.head = new Node("head");
 this.find = find;
 this.insert = insert;
 this.remove = remove;
 this.display = display;
}

undefined
function find(item) {
 var currNode = this.head;
 while (currNode.element != item) {
 currNode = currNode.next;
 }
 return currNode;
}
undefined
function insert(newElement, item) {
 var newNode = new Node(newElement);
 var current = this.find(item);
 newNode.next = current.next;
 current.next = newNode;
}

undefined
function display() {
 var currNode = this.head;
 while (!(currNode.next == null)) {
 print(currNode.next.element);
 currNode = currNode.next;
 }
}
undefined
function display() {
 var currNode = this.head;
 while (!(currNode.next == null)) {
 console.log(currNode.next.element);
 currNode = currNode.next;
 }
}
undefined
function LList() {
 this.head = new Node("head");
 this.find = find;
 this.insert = insert;
 this.display = display;
}

undefined
function find(item) {
 var currNode = this.head;
 while (currNode.element != item) {
 currNode = currNode.next;
 }
 return currNode;
}
undefined
function insert(newElement, item) {
 var newNode = new Node(newElement);
 var current = this.find(item);
 newNode.next = current.next;
 current.next = newNode;
}

undefined
function display() {
 var currNode = this.head;
 while (!(currNode.next == null)) {
 console.log(currNode.next.element);
 currNode = currNode.next;
 }
}

undefined
Var cities = new LList();
cities.insert("Conway", "head");
cities.insert("Russellville", "Conway");
cities.insert("Alma", "Russellville");
cities.display()

VM2184:1 Uncaught SyntaxError: Unexpected identifier
var cities = new LList();
cities.insert("Conway", "head");
cities.insert("Russellville", "Conway");
cities.insert("Alma", "Russellville");
cities.display()

VM2172:4 Conway
VM2172:4 Russellville
VM2172:4 Alma
undefined
function findPrevious(item) {
 var currNode = this.head;
 while (!(currNode.next == null) &&
 (currNode.next.element != item)) {
 currNode = currNode.next;
 }
 return currNode;
}
undefined
function remove(item) {
 var prevNode = this.findPrevious(item);
 if (!(prevNode.next == null)) {
 prevNode.next = prevNode.next.next;
 }
}

undefined
function LList() {
 this.head = new Node("head");
 this.find = find;
 this.insert = insert;
 this.display = display;
 this.findPrevious = findPrevious;
 this.remove = remove;
}
undefined
var cities = new LList();
cities.insert("Conway", "head");
cities.insert("Russellville", "Conway");
cities.insert("Carlisle", "Russellville");
cities.insert("Alma", "Carlisle");
cities.display();
console.log();
cities.remove("Carlisle");
cities.display();

VM2172:4 Conway
VM2172:4 Russellville
VM2172:4 Carlisle
VM2172:4 Alma
VM2172:4 Conway
VM2172:4 Russellville
VM2172:4 Alma
undefined
function Node(element) {
 this.element = element;
 this.next = null;
}

undefined
function LList() {
 this.head = new Node("head");
 this.find = find;
 this.insert = insert;
 this.display = display;
 this.findPrevious = findPrevious;
 this.remove = remove;
}
undefined
function remove(item) {
 var prevNode = this.findPrevious(item);
 if (!(prevNode.next == null)) {
 prevNode.next = prevNode.next.next;
 }
}

undefined
function findPrevious(item) {
 var currNode = this.head;
 while (!(currNode.next == null) &&
 (currNode.next.element != item)) {
 currNode = currNode.next;
 }
 return currNode;
}
undefined
function display() {
 var currNode = this.head;
 while (!(currNode.next == null)) {
console.log(currNode.next.element);
 currNode = currNode.next;
 }
}

undefined
function find(item) {
 var currNode = this.head;
 while (currNode.element != item) {
 currNode = currNode.next;
 }
 return currNode;
}

undefined
function insert(newElement, item) {
 var newNode = new Node(newElement);
 var current = this.find(item);
 newNode.next = current.next;
 current.next = newNode;
}


undefined
var cities = new LList();
cities.insert("Conway", "head");
cities.insert("Russellville", "Conway");
cities.insert("Carlisle", "Russellville");
cities.insert("Alma", "Carlisle");
cities.display();
console.log();
cities.remove("Carlisle");
cities.display();

VM2268:4 Conway
VM2268:4 Russellville
VM2268:4 Carlisle
VM2268:4 Alma
VM2268:4 Conway
VM2268:4 Russellville
VM2268:4 Alma
undefined
function Node(element) {
 this.element = element;
 this.next = null;
 this.previous = null;
}


undefined
function insert(newElement, item) {
 var newNode = new Node(newElement);
 var current = this.find(item);
 newNode.next = current.next;
 newNode.previous = current;
 current.next = newNode;
}

undefined
function remove(item) {
 var currNode = this.find(item);
 if (!(currNode.next == null)) {
 currNode.previous.next = currNode.next;
 currNode.next.previous = currNode.previous;
 currNode.next = null;
 currNode.previous = null;
 }
}
undefined
function findLast() {
 var currNode = this.head;
 while (!(currNode.next == null)) {
 currNode = currNode.next;
 }
 return currNode;
}

undefined
function dispReverse() {
 var currNode = this.head;
 currNode = this.findLast();
 while (!(currNode.previous == null)) {
console.log(currNode.element);
 currNode = currNode.previous;
 }
}
undefined
function Node(element) {
 this.element = element;
 this.next = null;
 this.previous = null;
}
undefined
function LList() {
 this.head = new Node("head");
 this.find = find;
 this.insert = insert;
 this.display = display;
 this.remove = remove;
 this.findLast = findLast;
 this.dispReverse = dispReverse;
}

undefined
function dispReverse() {
 var currNode = this.head;
 currNode = this.findLast();
 while (!(currNode.previous == null)) {
 console.log(currNode.element);
 currNode = currNode.previous;
 }
}
undefined
function findLast() {
 var currNode = this.head;
 while (!(currNode.next == null)) {
 currNode = currNode.next;
 }
 return currNode;
}
undefined
function remove(item) {
 var currNode = this.find(item);
 if (!(currNode.next == null)) {
 currNode.previous.next = currNode.next;
 currNode.next.previous = currNode.previous;
 currNode.next = null;
 currNode.previous = null;
 }
}
undefined
function display() {
 var currNode = this.head;
 while (!(currNode.next == null)) {
 print(currNode.next.element);
 currNode = currNode.next;
 }
}

undefined
function find(item) {
 var currNode = this.head;
 while (currNode.element != item) {
 currNode = currNode.next;
 }
 return currNode;
}
undefined
function insert(newElement, item) {
 var newNode = new Node(newElement);
 var current = this.find(item);
 newNode.next = current.next;
 newNode.previous = current;
 current.next = newNode;
}
undefined
var cities = new LList();
cities.insert("Conway", "head");
cities.insert("Russellville", "Conway");
cities.insert("Carlisle", "Russellville");
cities.insert("Alma", "Carlisle");
cities.display();
console.log();
cities.remove("Carlisle");
cities.display();

undefined
function display() {
 var currNode = this.head;
 while (!(currNode.next == null)) {
 console.log(currNode.next.element);
 currNode = currNode.next;
 }
}
undefined
function find(item) {
 var currNode = this.head;
 while (currNode.element != item) {
 currNode = currNode.next;
 }
 return currNode;
}

undefined
function insert(newElement, item) {
 var newNode = new Node(newElement);
 var current = this.find(item);
 newNode.next = current.next;
 newNode.previous = current;
 current.next = newNode;
}

undefined
var cities = new LList();
cities.insert("Conway", "head");
cities.insert("Russellville", "Conway");
cities.insert("Carlisle", "Russellville");
cities.insert("Alma", "Carlisle");
cities.display();
console.log();
cities.remove("Carlisle");
cities.display();

VM2589:4 Conway
VM2589:4 Russellville
VM2589:4 Carlisle
VM2589:4 Alma
VM2589:4 Conway
VM2589:4 Russellville
VM2589:4 Alma
undefined
console.log();
cities.dispReverse();

VM2431:5 Alma
VM2431:5 Russellville
VM2431:5 Conway
undefined
function LList() {
 this.head = new Node("head");
 this.head.next = this.head;
 this.find = find;
 this.insert = insert;
 this.display = display;
 this.findPrevious = findPrevious;
 this.remove = remove;
}

undefined
function display() {
 var currNode = this.head;
 while (!(currNode.next == null) &&
 !(currNode.next.element == "head")) {
console.log(currNode.next.element);
 currNode = currNode.next;
 }
}

undefined
